{"mappings":"AC8DE,MAAM,EAAU,CAChB,SACA,iCACA,wCACA,yCACA,2CACA,mDACA,0CAA2C,CAGrC,EAAK,SAAS,aAAa,CAAC,UAC5B,EAAK,IArEb,MACI,YAAY,CAAE,CAAE,CACd,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,KAAK,CAAG,8BACb,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CACrC,CACA,QAAQ,CAAO,CAAE,CACf,IAAM,EAAU,IAAI,CAAC,EAAE,CAAC,SAAS,CAC3B,EAAS,KAAK,GAAG,CAAC,EAAQ,MAAM,CAAE,EAAQ,MAAM,EAChD,EAAU,IAAI,QAAQ,AAAA,GAAW,IAAI,CAAC,OAAO,CAAG,EACtD,CAAA,IAAI,CAAC,KAAK,CAAG,EAAE,CACf,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAAK,CAC/B,IAAM,EAAO,CAAO,CAAC,EAAE,EAAI,GACrB,EAAK,CAAO,CAAC,EAAE,EAAI,GACnB,EAAQ,KAAK,KAAK,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAC9B,EAAM,EAAQ,KAAK,KAAK,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAE,KAAA,EAAM,GAAA,EAAI,MAAA,EAAO,IAAA,CAAI,EACzC,CAIA,OAHA,qBAAqB,IAAI,CAAC,YAAY,EACtC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,GACJ,CACT,CACA,QAAS,CACP,IAAI,EAAS,GACT,EAAW,EACf,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,EAAI,EAAG,IAAK,CACjD,GAAI,CAAE,KAAA,CAAI,CAAE,GAAA,CAAE,CAAE,MAAA,CAAK,CAAE,IAAA,CAAG,CAAE,KAAA,CAAI,CAAE,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,AAC9C,CAAA,IAAI,CAAC,KAAK,EAAI,GAChB,IACA,GAAU,GACD,IAAI,CAAC,KAAK,EAAI,GACnB,CAAA,CAAC,GAAQ,AAAgB,IAAhB,KAAK,MAAM,EAAK,IAC3B,EAAO,IAAI,CAAC,UAAU,GACtB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAG,GAEvB,GAAU,CAAC,kBAAkB,EAAE,EAAK,OAAO,CAAC,EAE5C,GAAU,CAEd,CACA,IAAI,CAAC,EAAE,CAAC,SAAS,CAAG,EAChB,IAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAChC,IAAI,CAAC,OAAO,IAEZ,IAAI,CAAC,YAAY,CAAG,sBAAsB,IAAI,CAAC,MAAM,EACrD,IAAI,CAAC,KAAK,GAEd,CACA,YAAa,CACX,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,AAClE,CAAC,EAkByB,GAE5B,IAAI,EAAU,EACd,MAAM,EAAO,KACX,EAAG,OAAO,CAAC,CAAO,CAAC,EAAQ,EAAE,IAAI,CAAC,KAChC,WAAW,EAAM,IACnB,GACA,EAAW,AAAA,CAAA,EAAU,CAAA,EAAK,EAAQ,MAAM,AAC1C,EAEA","sources":["<anon>","txtscrambled.js"],"sourcesContent":["// ——————————————————————————————————————————————————\n// TextScramble\n// ——————————————————————————————————————————————————\nclass TextScramble {\n    constructor(el){\n        this.el = el;\n        this.chars = \"!<>-_\\\\/[]{}\\u2014=+*^?#________\";\n        this.update = this.update.bind(this);\n    }\n    setText(newText) {\n        const oldText = this.el.innerText;\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise((resolve)=>this.resolve = resolve);\n        this.queue = [];\n        for(let i = 0; i < length; i++){\n            const from = oldText[i] || '';\n            const to = newText[i] || '';\n            const start = Math.floor(Math.random() * 40);\n            const end = start + Math.floor(Math.random() * 40);\n            this.queue.push({\n                from,\n                to,\n                start,\n                end\n            });\n        }\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n    }\n    update() {\n        let output = '';\n        let complete = 0;\n        for(let i = 0, n = this.queue.length; i < n; i++){\n            let { from, to, start, end, char } = this.queue[i];\n            if (this.frame >= end) {\n                complete++;\n                output += to;\n            } else if (this.frame >= start) {\n                if (!char || Math.random() < 0.28) {\n                    char = this.randomChar();\n                    this.queue[i].char = char;\n                }\n                output += `<span class=\"dud\">${char}</span>`;\n            } else output += from;\n        }\n        this.el.innerHTML = output;\n        if (complete === this.queue.length) this.resolve();\n        else {\n            this.frameRequest = requestAnimationFrame(this.update);\n            this.frame++;\n        }\n    }\n    randomChar() {\n        return this.chars[Math.floor(Math.random() * this.chars.length)];\n    }\n}\n// ——————————————————————————————————————————————————\n// Example\n// ——————————————————————————————————————————————————\nconst phrases = [\n    'Hello,',\n    'this is where innovation meets',\n    'creativity and dreams become reality.',\n    'We\\'re a team of passionate individuals',\n    'dedicated to bringing your ideas to life',\n    'with our expertise and commitment to excellence.',\n    'Let\\'s build something amazing together!'\n];\nconst el = document.querySelector('.textt');\nconst fx = new TextScramble(el);\nlet counter = 0;\nconst next = ()=>{\n    fx.setText(phrases[counter]).then(()=>{\n        setTimeout(next, 800);\n    });\n    counter = (counter + 1) % phrases.length;\n};\nnext();\n\n//# sourceMappingURL=about.27365868.js.map\n","// ——————————————————————————————————————————————————\r\n// TextScramble\r\n// ——————————————————————————————————————————————————\r\n\r\nclass TextScramble {\r\n    constructor(el) {\r\n      this.el = el;\r\n      this.chars = '!<>-_\\\\/[]{}—=+*^?#________';\r\n      this.update = this.update.bind(this);\r\n    }\r\n    setText(newText) {\r\n      const oldText = this.el.innerText;\r\n      const length = Math.max(oldText.length, newText.length);\r\n      const promise = new Promise(resolve => this.resolve = resolve);\r\n      this.queue = [];\r\n      for (let i = 0; i < length; i++) {\r\n        const from = oldText[i] || '';\r\n        const to = newText[i] || '';\r\n        const start = Math.floor(Math.random() * 40);\r\n        const end = start + Math.floor(Math.random() * 40);\r\n        this.queue.push({ from, to, start, end });\r\n      }\r\n      cancelAnimationFrame(this.frameRequest);\r\n      this.frame = 0;\r\n      this.update();\r\n      return promise;\r\n    }\r\n    update() {\r\n      let output = '';\r\n      let complete = 0;\r\n      for (let i = 0, n = this.queue.length; i < n; i++) {\r\n        let { from, to, start, end, char } = this.queue[i];\r\n        if (this.frame >= end) {\r\n          complete++;\r\n          output += to;\r\n        } else if (this.frame >= start) {\r\n          if (!char || Math.random() < 0.28) {\r\n            char = this.randomChar();\r\n            this.queue[i].char = char;\r\n          }\r\n          output += `<span class=\"dud\">${char}</span>`;\r\n        } else {\r\n          output += from;\r\n        }\r\n      }\r\n      this.el.innerHTML = output;\r\n      if (complete === this.queue.length) {\r\n        this.resolve();\r\n      } else {\r\n        this.frameRequest = requestAnimationFrame(this.update);\r\n        this.frame++;\r\n      }\r\n    }\r\n    randomChar() {\r\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\r\n    }}\r\n  \r\n  \r\n  // ——————————————————————————————————————————————————\r\n  // Example\r\n  // ——————————————————————————————————————————————————\r\n  \r\n  const phrases = [\r\n  'Hello,',\r\n  'this is where innovation meets',\r\n  'creativity and dreams become reality.',\r\n  'We\\'re a team of passionate individuals',\r\n  'dedicated to bringing your ideas to life',\r\n  'with our expertise and commitment to excellence.',\r\n  'Let\\'s build something amazing together!'];\r\n  \r\n  \r\n  const el = document.querySelector('.textt');\r\n  const fx = new TextScramble(el);\r\n  \r\n  let counter = 0;\r\n  const next = () => {\r\n    fx.setText(phrases[counter]).then(() => {\r\n      setTimeout(next, 800);\r\n    });\r\n    counter = (counter + 1) % phrases.length;\r\n  };\r\n  \r\n  next();"],"names":["phrases","el","document","querySelector","fx","constructor","chars","update","bind","setText","newText","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","counter","next","then","setTimeout"],"version":3,"file":"about.27365868.js.map"}